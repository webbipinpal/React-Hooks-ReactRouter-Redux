{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","_toArray","arr","arrayWithHoles","iter","Symbol","iterator","Object","Array","from","unsupportedIterableToArray","nonIterableRest","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","useState","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","shoredQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,8ECGd,SAASC,EAASC,GAC/B,OAAO,OAAAC,EAAA,GAAeD,ICLT,SAA0BE,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOI,MAAMC,KAAKL,GDI1D,CAAgBF,IAAQ,OAAAQ,EAAA,GAA2BR,IAAQ,OAAAS,EAAA,K,0CEc5EC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBC2CSO,EAvCG,SAACR,GACjB,EAAWS,oBAAS,IAApB,IAXkBC,EAAQC,EAapBC,EAAUC,cACVC,EAAWC,cAEXC,EAAiD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QACrCC,GAjBYV,EAiBcV,EAAMU,OAjBZC,EAiBoBK,EAhBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,EAE7Be,EAAOf,GAAKgB,EAAOhB,GAAK,GAAK,MAwBxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAbe,WAC3Bb,EAAQc,KAAK,CACXC,SAAQ,UAAMb,EAASa,UACvBT,OAAM,gBAAaF,EAAqB,OAAS,UAU/C,mBAA8CA,EAAqB,aAAe,YAAlF,SAGF,oBAAIf,UAAWC,IAAQ0B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEvB,GAAIuB,EAAMvB,GACVF,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMvB,a,yCC9BRwB,EAXO,WACpB,OACE,sBAAK9B,UAAWC,IAAQ8B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM1B,GAAG,cAAcL,UAAU,MAAjC,6BC+BSgC,UA/BG,WACd,MAA0DC,YAAQC,KAAc,GAAxEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAaC,EAAlC,EAA6BC,KAAmBC,EAAhD,EAAgDA,MAMhD,OAJAC,qBAAW,WACPL,MACD,CAACA,IAEU,YAAXC,EAEK,qBAAKpC,UAAU,WAAf,SACI,cAACyC,EAAA,EAAD,MAITF,EAEK,qBAAKvC,UAAU,mBAAf,SACKuC,IAIC,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAIrD,eAAC,WAAD,WACH,mDACA,cAAC,EAAD,CAAWjC,OAAQ4B,OALZ,cAAC,EAAD","file":"static/js/5.b467fa7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2eWWx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3X4FR\",\"sorting\":\"QuoteList_sorting__3eLAq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__7jwcj\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import { Link } from 'react-router-dom';\nimport classes from './QuoteItem.module.css';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const [] = useState(false);\n\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n  const shoredQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    history.push({\n      pathname : `${location.pathname}`,\n      search : `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n\n  }\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}> Sort {isSortingAscending ? 'Descending' : 'Ascending'} </button>\n      </div>\n\n      <ul className={classes.list}>\n        {shoredQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\nimport { Link } from 'react-router-dom'; \n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quotes\" className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Fragment, useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\"; \r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n\r\nconst AllQuotes = () => {\r\n    const { sendRequest, status, data:loadedQuotes, error } = useHttp(getAllQuotes, true);\r\n\r\n    useEffect( () => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    if(status === 'pending'){\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n    if(error){\r\n        return(\r\n            <div className=\"centered focused\">\r\n                {error}\r\n            </div>\r\n        )\r\n    }\r\n    if(status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)){\r\n        return <NoQuotesFound />\r\n    }\r\n\r\n    return <Fragment>\r\n        <h1> All Quotes Page </h1>\r\n        <QuoteList quotes={loadedQuotes} />\r\n    </Fragment> \r\n};\r\n\r\nexport default AllQuotes;"],"sourceRoot":""}